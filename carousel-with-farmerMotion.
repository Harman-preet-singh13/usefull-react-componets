This carousel wihout buttons.
--------------------------------------------------
  carosuel.tsx

  "use client";

import React, { useEffect, useRef, useState } from "react";
import { motion } from "framer-motion";
import images from "../app/components/images.js"

export default function page() {

  const [width, setWidth] = useState(0);
  const [next, setNext] = useState(0)
  const carousel = useRef<HTMLElement | null>(null);

  useEffect(() => {

    console.log(carousel.current)


    if (carousel.current) {
      const totalWidth = carousel.current?.scrollWidth - carousel.current?.offsetWidth || 0;
      setWidth(totalWidth);

      console.log(totalWidth)
  
    }
  }, [images]);

  return (
    <main className="c">

      <motion.div
        ref={(el) => (carousel.current = el)}
        className="carousel-container"
        whileTap={{cursor:"grabbing"}}
      >
        <motion.div
          drag="x"
          dragConstraints={{ right: 0, left: -width }}
          className="inner-carousel"
        >
          {images.map((image, index) => {
            return (
              <motion.div 
              key={index} 
              className="item"
             
              >
                <img src={image.src} />
              </motion.div>
            );
          })}
        </motion.div>
      </motion.div>
   </main>
  );
}

---------------------------------------
css

/* carousel using famer motion */

/* body{
  color:white;
  margin: 10% 10%;
}



.carousel-container{
  padding-inline:40px;
  cursor: grab;
  overflow: hidden;
  background-color: white;
}

.inner-carousel{
  display: flex;
  
}

.item{
  min-height: 40rem;
  min-width: 30rem;
  padding:40px;
}

.item img{
  width: 100%;
  height: 100%;
  border-radius: .5rem;
} 


-------------------------------------------------------

carousel with button. npm i popmotion

tsx file.
"use client"

import { wrap } from "popmotion";
import React, { useState } from 'react'
import images from "./components/images";
import { AnimatePresence, motion } from "framer-motion";

const variants = {

  enter:(direction:number) => {
    return {
      x: direction > 0 ? 1000 : -1000,
      opacity:0
    };
  },
  center:{
    zIndex:1,
    x:0,
    opacity:1
  },
  exit: (direction:number) => {
    return {
      x: direction < 0 ? 1000 : -1000,
      opacity:0
    };
  }
};

const swipeConfidenceThreshold = 10000;
const swipePower = (offset: number, velocity: number) => {
  return Math.abs(offset) * velocity;
};

export default function page() {

  const [[page,direction], setPage] = useState([0,0]);

  const imageIndex = wrap(0,images.length,page);

  const paginate = (newDirection:number)=>{
    setPage([page + newDirection, newDirection])
  };

  return (
    <div className="example-container">
    <AnimatePresence initial={false} custom={direction}>
      <motion.img 
      key={page}
      src={images[imageIndex].src}
      custom={direction}
      variants={variants}
      inherit="enter"
      animate="center"
      exit="exit"
      transition={{
        x:{ type: "spring", stiffness:300, damping:30},
        opacity: {duration:0.2}
      }}
      drag="x"
      dragConstraints={{left:0, right:0}}
      dragElastic={1}
      onDragEnd={(e, {offset, velocity}) => {
        const swipe = swipePower(offset.x, velocity.x);

        if(swipe < -swipeConfidenceThreshold){
          paginate(1);
        }else if(swipe > swipeConfidenceThreshold){
          paginate(-1);
        }
      }}
      />
    </AnimatePresence>
    <div className="next" onClick={() => paginate(1)}>
     {"‣"}
    </div>
    <div className="prev" onClick={() => paginate(-1)}>
     {"‣"}
    </div>
    </div>
  )
}
--------------------------------------------------------------------------
css
body{
  color:white;
  width: 100vw;
  height: 100vh;
  overflow: hidden;
  margin:0;
  display: flex;
  justify-content: center;
  align-items: center;
}

.example-container{
  width: 30rem;
  height: 40rem;
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
}

.next,
.prev{
  top: calc(50% - 20px);
  position: absolute;
  background: white;
  border-radius: 30px;
  width:40px;
  height: 40px;
  display: flex;
  justify-content: center;
  align-items: center;
  user-select: none;
  cursor: pointer;
  font-weight: bold;
  font-size: 18px;
  z-index: 2;
}

.next{
  right:10px
}

.prev{
  left:10px;
  transform: scale(-1);
}

img{
  position: absolute;
  max-width: 30rem;
  max-height: 40rem;
  border-radius: 20px;
}


