React carousel with btn and indicator

import React, { useEffect, useState } from "react";
import Parent from "./components/Parent";
import { useContext } from "react";
import "./App.css";
import ThemeContext from "./context/ThemeContext";
import Images from "./components/Images";
import { BiSolidLeftArrow, BiSolidRightArrow } from "react-icons/bi";

export default function App() {

  const [currentIndex, setCurrentIndex] = useState(0);

  useEffect(() => {
    const intervalId = setInterval(() => {
      setCurrentIndex((prevIndex) => (prevIndex + 1) % Images.length);
    }, 3000);

    return () => clearInterval(intervalId);
  }, []);

  const translateValue = `translateX(${currentIndex * -305}px)`;

  const indexHandler = (index) => {
    setCurrentIndex(index);
  };


  const prevBtnImg = () => {
    setCurrentIndex((prevIndex)=> (prevIndex - 1 + Images.length) % Images.length);
  }

  const nextBtnImg = () => {
    setCurrentIndex((prevIndex)=> (prevIndex + 1 + Images.length) % Images.length);
  }

  return (
    <>
      <div className="box-container h-screen flex justify-center items-center">
        <div style={{ position: "relative" }}>
          <div className="wrapper">
            {Images.map((images, index) => {
              return (
                <div
                  key={index}
                  style={{
                    transform: translateValue,
                  }}
                  className=""
                >
                  <img
                    src={images.url}
                    className=" bg-slate-400 h-48 w-[200px] border rounded-full"
                    alt="wallpaper"
                  />
                  <h2 className="text-center ml-12 font-mono text-lg font-semibold">
                    {images.name}
                  </h2>
                </div>
              );
            })}
          </div>
          <div className="dots-container">
            {Images.map((_, index) => {
              return (
                <>
                <button
                  key={index}
                  onClick={() => indexHandler(index)}
                  className={`dot ${
                    index === currentIndex ? "active-dot" : ""
                  }`}
                ></button>
                
                </>
              );
            })}
          </div>
          <div className="btn-left">
            <button
            onClick={prevBtnImg}
            className="btn ">
              <BiSolidLeftArrow />
            </button>
          </div>
          <div className="btn-right">
            <button
            onClick={nextBtnImg}
            className="btn">
              <BiSolidRightArrow />
            </button>
          </div>
        </div>
      </div>
    </>
  );
}

CSS: 
.wrapper{

    overflow-x: hidden;
    border: 2px solid blue;
    border-radius: 20px;

    width: 400px;
    padding: 20px;

    display: flex;
    
}


:root{
    --translate-multiplier: -310px;
}

.img-container{
    z-index: 1;
}

img{
    margin-left:80px;
    margin-right:220px;
}

.active{
    transform: translateX(var(--translate-multiplier));
    transition: transform 0.5s ease-in-out;
}

.dots-container{
    display: flex;
    justify-content: center;
    margin-top:10px;
}

.dot{
    width:10px;
    height: 10px;
    background-color: lightgray;
    border-radius: 50%;
    margin: 0 5px;
    cursor: pointer;
}

.active-dot{
    background-color: black;
}


.btn{
    font-size: 28px;
    opacity: 0.5;
}

.btn:hover{
    opacity: 1;
}


.btn-left{
    position: absolute;
    top:43%;
    left:0;
}

.btn-right{
    position: absolute;
    top:43%;
    right:0;
}
